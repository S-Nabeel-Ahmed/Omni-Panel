/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace LibPart {
  export type PartStruct = { account: string; value: BigNumberish };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export declare namespace LibERC1155Lazy {
  export type MintSingleDataStruct = {
    minter: BigNumberish;
    collectionId: BigNumberish;
    tokenId: BigNumberish;
    supply: BigNumberish;
    collectionUri: string;
    baseUri: string;
    creators: LibPart.PartStruct[];
    royalties: LibPart.PartStruct[];
    signatures: BytesLike[];
  };

  export type MintSingleDataStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    LibPart.PartStructOutput[],
    LibPart.PartStructOutput[],
    string[]
  ] & {
    minter: BigNumber;
    collectionId: number;
    tokenId: BigNumber;
    supply: BigNumber;
    collectionUri: string;
    baseUri: string;
    creators: LibPart.PartStructOutput[];
    royalties: LibPart.PartStructOutput[];
    signatures: string[];
  };

  export type MintDataStruct = {
    minter: BigNumberish;
    collectionId: BigNumberish;
    tokenStartId: BigNumberish;
    tokenEndId: BigNumberish;
    tokenSupplies: BigNumberish[];
    collectionUri: string;
    baseUri: string;
    creators: LibPart.PartStruct[];
    royalties: LibPart.PartStruct[];
    signatures: BytesLike[];
  };

  export type MintDataStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber[],
    string,
    string,
    LibPart.PartStructOutput[],
    LibPart.PartStructOutput[],
    string[]
  ] & {
    minter: BigNumber;
    collectionId: number;
    tokenStartId: BigNumber;
    tokenEndId: BigNumber;
    tokenSupplies: BigNumber[];
    collectionUri: string;
    baseUri: string;
    creators: LibPart.PartStructOutput[];
    royalties: LibPart.PartStructOutput[];
    signatures: string[];
  };
}

export interface NaaSInterface extends utils.Interface {
  functions: {
    "addMinter(address)": FunctionFragment;
    "applyMinter(address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "baseCollectionURI()": FunctionFragment;
    "baseURI()": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "collectionExists(uint256)": FunctionFragment;
    "collectionTokens(uint256)": FunctionFragment;
    "collectionURI(uint256)": FunctionFragment;
    "collectionURIForToken(uint256)": FunctionFragment;
    "creatorsRegistry()": FunctionFragment;
    "dividerMultiplier()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "initialize(string,string,address,address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "maximumSupply(uint256)": FunctionFragment;
    "mint((uint160,uint32,uint64,uint256,string,string,(address,uint256)[],(address,uint256)[],bytes[]),address,uint256)": FunctionFragment;
    "mintMultiple((uint160,uint32,uint64,uint64,uint256[],string,string,(address,uint256)[],(address,uint256)[],bytes[]),address,uint64[],uint256[])": FunctionFragment;
    "mintNFTs((uint160,uint32,uint64,uint64,uint256[],string,string,(address,uint256)[],(address,uint256)[],bytes[]),address,uint256)": FunctionFragment;
    "minterDelay()": FunctionFragment;
    "minterPending(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nftsLeft((uint160,uint32,uint64,uint64,uint256[],string,string,(address,uint256)[],(address,uint256)[],bytes[]))": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiesRegistry()": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeMinter()": FunctionFragment;
    "royaltiesProvider()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseCollectionURI(string)": FunctionFragment;
    "setCollectionTokenURI(uint256,string)": FunctionFragment;
    "setCollectionURI(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMinter"
      | "applyMinter"
      | "balanceOf"
      | "balanceOfBatch"
      | "baseCollectionURI"
      | "baseURI"
      | "burn"
      | "burnBatch"
      | "collectionExists"
      | "collectionTokens"
      | "collectionURI"
      | "collectionURIForToken"
      | "creatorsRegistry"
      | "dividerMultiplier"
      | "exists"
      | "initialize"
      | "isApprovedForAll"
      | "isMinter"
      | "maximumSupply"
      | "mint"
      | "mintMultiple"
      | "mintNFTs"
      | "minterDelay"
      | "minterPending"
      | "name"
      | "nftsLeft"
      | "owner"
      | "proxiesRegistry"
      | "removeMinter"
      | "renounceOwnership"
      | "revokeMinter"
      | "royaltiesProvider"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setBaseCollectionURI"
      | "setCollectionTokenURI"
      | "setCollectionURI"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "transferOwnership"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addMinter", values: [string]): string;
  encodeFunctionData(functionFragment: "applyMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "baseCollectionURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionURIForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dividerMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maximumSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [LibERC1155Lazy.MintSingleDataStruct, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMultiple",
    values: [
      LibERC1155Lazy.MintDataStruct,
      string,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFTs",
    values: [LibERC1155Lazy.MintDataStruct, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minterDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterPending",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftsLeft",
    values: [LibERC1155Lazy.MintDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseCollectionURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseCollectionURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionURIForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividerMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minterDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftsLeft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseCollectionURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CollectionBaseURI(string,uint256)": EventFragment;
    "CollectionURI(string,uint256)": EventFragment;
    "MinterAdded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionBaseURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CollectionBaseURIEventObject {
  value: string;
  id: BigNumber;
}
export type CollectionBaseURIEvent = TypedEvent<
  [string, BigNumber],
  CollectionBaseURIEventObject
>;

export type CollectionBaseURIEventFilter =
  TypedEventFilter<CollectionBaseURIEvent>;

export interface CollectionURIEventObject {
  value: string;
  id: BigNumber;
}
export type CollectionURIEvent = TypedEvent<
  [string, BigNumber],
  CollectionURIEventObject
>;

export type CollectionURIEventFilter = TypedEventFilter<CollectionURIEvent>;

export interface MinterAddedEventObject {
  minter: string;
}
export type MinterAddedEvent = TypedEvent<[string], MinterAddedEventObject>;

export type MinterAddedEventFilter = TypedEventFilter<MinterAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface NaaS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NaaSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    baseCollectionURI(overrides?: CallOverrides): Promise<[string]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectionExists(
      collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    collectionTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    collectionURI(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collectionURIForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creatorsRegistry(overrides?: CallOverrides): Promise<[string]>;

    dividerMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _name: string,
      _symbol: string,
      _proxiesRegistry: string,
      _creatorsRegistry: string,
      _royaltiesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOperator: boolean }>;

    isMinter(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    maximumSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      data: LibERC1155Lazy.MintSingleDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMultiple(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNFTs(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minterDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minterPending(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftsLeft(
      data: LibERC1155Lazy.MintDataStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiesRegistry(overrides?: CallOverrides): Promise<[string]>;

    removeMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltiesProvider(overrides?: CallOverrides): Promise<[string]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseCollectionURI(
      _newBaseMetadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionTokenURI(
      collectionId: BigNumberish,
      _baseCollectionURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionURI(
      collectionId: BigNumberish,
      _collectionURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  addMinter(
    minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyMinter(
    minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  baseCollectionURI(overrides?: CallOverrides): Promise<string>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  burn(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnBatch(
    account: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectionExists(
    collectionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  collectionTokens(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  collectionURI(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  collectionURIForToken(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  creatorsRegistry(overrides?: CallOverrides): Promise<string>;

  dividerMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _name: string,
    _symbol: string,
    _proxiesRegistry: string,
    _creatorsRegistry: string,
    _royaltiesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  maximumSupply(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    data: LibERC1155Lazy.MintSingleDataStruct,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMultiple(
    data: LibERC1155Lazy.MintDataStruct,
    to: string,
    ids: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNFTs(
    data: LibERC1155Lazy.MintDataStruct,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minterDelay(overrides?: CallOverrides): Promise<BigNumber>;

  minterPending(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nftsLeft(
    data: LibERC1155Lazy.MintDataStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiesRegistry(overrides?: CallOverrides): Promise<string>;

  removeMinter(
    minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeMinter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltiesProvider(overrides?: CallOverrides): Promise<string>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseCollectionURI(
    _newBaseMetadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionTokenURI(
    collectionId: BigNumberish,
    _baseCollectionURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionURI(
    collectionId: BigNumberish,
    _collectionURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addMinter(minter: string, overrides?: CallOverrides): Promise<void>;

    applyMinter(minter: string, overrides?: CallOverrides): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    baseCollectionURI(overrides?: CallOverrides): Promise<string>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    collectionExists(
      collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    collectionTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    collectionURI(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    collectionURIForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    creatorsRegistry(overrides?: CallOverrides): Promise<string>;

    dividerMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _name: string,
      _symbol: string,
      _proxiesRegistry: string,
      _creatorsRegistry: string,
      _royaltiesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    maximumSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      data: LibERC1155Lazy.MintSingleDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMultiple(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintNFTs(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minterDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minterPending(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nftsLeft(
      data: LibERC1155Lazy.MintDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiesRegistry(overrides?: CallOverrides): Promise<string>;

    removeMinter(minter: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeMinter(overrides?: CallOverrides): Promise<void>;

    royaltiesProvider(overrides?: CallOverrides): Promise<string>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseCollectionURI(
      _newBaseMetadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionTokenURI(
      collectionId: BigNumberish,
      _baseCollectionURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionURI(
      collectionId: BigNumberish,
      _collectionURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CollectionBaseURI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): CollectionBaseURIEventFilter;
    CollectionBaseURI(
      value?: null,
      id?: BigNumberish | null
    ): CollectionBaseURIEventFilter;

    "CollectionURI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): CollectionURIEventFilter;
    CollectionURI(
      value?: null,
      id?: BigNumberish | null
    ): CollectionURIEventFilter;

    "MinterAdded(address)"(minter?: string | null): MinterAddedEventFilter;
    MinterAdded(minter?: string | null): MinterAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    addMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseCollectionURI(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectionExists(
      collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionURI(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionURIForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    dividerMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _proxiesRegistry: string,
      _creatorsRegistry: string,
      _royaltiesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maximumSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      data: LibERC1155Lazy.MintSingleDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMultiple(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNFTs(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minterDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minterPending(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftsLeft(
      data: LibERC1155Lazy.MintDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiesRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    removeMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltiesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseCollectionURI(
      _newBaseMetadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionTokenURI(
      collectionId: BigNumberish,
      _baseCollectionURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionURI(
      collectionId: BigNumberish,
      _collectionURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseCollectionURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectionExists(
      collectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionTokens(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionURI(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionURIForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorsRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dividerMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _proxiesRegistry: string,
      _creatorsRegistry: string,
      _royaltiesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      data: LibERC1155Lazy.MintSingleDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMultiple(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNFTs(
      data: LibERC1155Lazy.MintDataStruct,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minterDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minterPending(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftsLeft(
      data: LibERC1155Lazy.MintDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiesRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltiesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseCollectionURI(
      _newBaseMetadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionTokenURI(
      collectionId: BigNumberish,
      _baseCollectionURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionURI(
      collectionId: BigNumberish,
      _collectionURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
