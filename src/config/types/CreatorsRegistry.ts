/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace LibPart {
  export type PartStruct = { account: string; value: BigNumberish };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export declare namespace LibERC1155Creators {
  export type DataStruct = {
    tokenId: BigNumberish;
    creators: LibPart.PartStruct[];
    signatures: BytesLike[];
    previousSignatures: BytesLike[];
  };

  export type DataStructOutput = [
    BigNumber,
    LibPart.PartStructOutput[],
    string[],
    string[]
  ] & {
    tokenId: BigNumber;
    creators: LibPart.PartStructOutput[];
    signatures: string[];
    previousSignatures: string[];
  };
}

export interface CreatorsRegistryInterface extends utils.Interface {
  functions: {
    "creators(address,uint256,uint256)": FunctionFragment;
    "getCreators(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isCreator(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saveCreators(uint256,(address,uint256)[])": FunctionFragment;
    "setCreator(address,uint256,address)": FunctionFragment;
    "setCreatorBatch(address,uint256[],address[])": FunctionFragment;
    "setCreators(address,(uint256,(address,uint256)[],bytes[],bytes[]))": FunctionFragment;
    "setCreatorsBatch(address,(uint256,(address,uint256)[],bytes[],bytes[])[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "creators"
      | "getCreators"
      | "initialize"
      | "isCreator"
      | "owner"
      | "renounceOwnership"
      | "saveCreators"
      | "setCreator"
      | "setCreatorBatch"
      | "setCreators"
      | "setCreatorsBatch"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "creators",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreators",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCreator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveCreators",
    values: [BigNumberish, LibPart.PartStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreator",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorBatch",
    values: [string, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreators",
    values: [string, LibERC1155Creators.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorsBatch",
    values: [string, LibERC1155Creators.DataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "creators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CreatorsRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreatorsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    creators(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    getCreators(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LibPart.PartStructOutput[]]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCreator(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saveCreators(
      tokenId: BigNumberish,
      _creators: LibPart.PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreator(
      token: string,
      _id: BigNumberish,
      _newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreatorBatch(
      token: string,
      _ids: BigNumberish[],
      _newCreators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreators(
      token: string,
      data: LibERC1155Creators.DataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreatorsBatch(
      token: string,
      data: LibERC1155Creators.DataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  creators(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

  getCreators(
    token: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LibPart.PartStructOutput[]>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCreator(
    token: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saveCreators(
    tokenId: BigNumberish,
    _creators: LibPart.PartStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreator(
    token: string,
    _id: BigNumberish,
    _newCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreatorBatch(
    token: string,
    _ids: BigNumberish[],
    _newCreators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreators(
    token: string,
    data: LibERC1155Creators.DataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreatorsBatch(
    token: string,
    data: LibERC1155Creators.DataStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    creators(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    getCreators(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LibPart.PartStructOutput[]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isCreator(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saveCreators(
      tokenId: BigNumberish,
      _creators: LibPart.PartStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCreator(
      token: string,
      _id: BigNumberish,
      _newCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorBatch(
      token: string,
      _ids: BigNumberish[],
      _newCreators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCreators(
      token: string,
      data: LibERC1155Creators.DataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorsBatch(
      token: string,
      data: LibERC1155Creators.DataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    creators(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreators(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCreator(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saveCreators(
      tokenId: BigNumberish,
      _creators: LibPart.PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreator(
      token: string,
      _id: BigNumberish,
      _newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreatorBatch(
      token: string,
      _ids: BigNumberish[],
      _newCreators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreators(
      token: string,
      data: LibERC1155Creators.DataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreatorsBatch(
      token: string,
      data: LibERC1155Creators.DataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    creators(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreators(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCreator(
      token: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saveCreators(
      tokenId: BigNumberish,
      _creators: LibPart.PartStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreator(
      token: string,
      _id: BigNumberish,
      _newCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreatorBatch(
      token: string,
      _ids: BigNumberish[],
      _newCreators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreators(
      token: string,
      data: LibERC1155Creators.DataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreatorsBatch(
      token: string,
      data: LibERC1155Creators.DataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
